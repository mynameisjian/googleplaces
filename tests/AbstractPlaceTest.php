<?php
namespace JianHan\GooglePlaces;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-02 at 12:56:09.
 */
class AbstractPlaceTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var $classNameToBeTested String as name of the class to be tested.
	 */	
    protected $classNameToBeTested;

    /**
     * @var ReflectionClass Reflection class of current abstract class , used to get inaccessible property and attributes.
     */
    protected $reflectionClassToBeTested;

    /**
     * @var Object Instance of mocked class for AbstractPlace.
     */
    protected $mockedAbstractPlace;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

        $this->classNameToBeTested       = '\\JianHan\\GooglePlaces\\AbstractPlace';

        $this->reflectionClassToBeTested = new \ReflectionClass($this->classNameToBeTested);

        $this->mockedAbstractPlace = $this->getMockBuilder($this->classNameToBeTested)
                                          ->setMethods(array('validateRequiredParameters'))
                                          ->disableOriginalConstructor()
                                          ->getMockForAbstractClass();
                                          
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->reflectionClassToBeTested = null;

        $this->classNameToBeTested       = null;

        $this->mockedAbstractPlace       = null;
    }

   	/**
   	  * Valid key data provider will return array of valid keys for other tests.
   	  * 
   	  * @return array Array contains valid keys.
   	  */ 
    public function validStringProvider() : array
    {

    	return [

    		['validString', 'valid string with space']

    	];

    }

    /**
     * Invalid string provider which will provide invalid strings for tests.
     * @return array Will contain all invalid strings.
     */
    public function invalidStringProvider() : array
    {

    	return [

    		['validString', 'valid string with space']

    	];

    }

    /**
     * Valid services as string for testing getInstance.
     */
    public function validPlaceInstanceServices() : array
    {

    	return [

    		['nearbysearch', 'key'], ['textsearch', 'key'], ['radarsearch', 'key'], ['details', 'key']

    	];

    }

    /**
     * @covers JianHan\GooglePlaces\AbstractPlace::getRequestParameters
     * @covers JianHan\GooglePlaces\AbstractPlace::setRequestParameters
     */
    public function testGetRequestParameters()
    {

    	$validArray = ['1' => 'one', '2' => 'two'];

        $this->mockedAbstractPlace->setRequestParameters($validArray);

        $this->assertEquals($validArray, $this->mockedAbstractPlace->getRequestParameters());


    }

    /**
     * @covers JianHan\GooglePlaces\AbstractPlace::setRequestParameters
     * @expectedException InvalidArgumentException
     */
    public function testSetRequestParametersWithEmptyArray()
    {

    	$emptyArray = [];

        $this->mockedAbstractPlace->setRequestParameters($emptyArray);

    }

    /**
     * @covers JianHan\GooglePlaces\AbstractPlace::setRequestParameters
     * @expectedException InvalidArgumentException
     */
    public function testSetRequestParametersWithMultiDementionalArray()
    {

    	$mutiDementionalArray = ['test', [1,2,3], 'test2'];

    	$this->mockedAbstractPlace->setRequestParameters($mutiDementionalArray);
    }

    /**
     * @covers JianHan\GooglePlaces\AbstractPlace::getInstance
     * @dataProvider validPlaceInstanceServices
     */
    public function testGetInstance($service, $key)
    {

    	$serviceInstance = \JianHan\GooglePlaces\AbstractPlace::getInstance($service, $key);
    	
    	$this->assertTrue($serviceInstance instanceof \JianHan\GooglePlaces\AbstractPlace);

    }

}
